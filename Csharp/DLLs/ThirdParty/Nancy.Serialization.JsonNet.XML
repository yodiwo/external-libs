<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nancy.Serialization.JsonNet</name>
    </assembly>
    <members>
        <member name="M:Nancy.Serialization.JsonNet.Helpers.IsJsonType(System.String)">
            <summary>
            Attempts to detect if the content type is JSON.
            Supports:
              application/json
              text/json
              application/vnd[something]+json
            Matches are case insentitive to try and be as "accepting" as possible.
            </summary>
            <param name="contentType">Request content type</param>
            <returns>True if content type is JSON, false otherwise</returns>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetBodyDeserializer.#ctor">
            <summary>
            Empty constructor if no converters are needed
            </summary>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetBodyDeserializer.#ctor(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Constructor to use when a custom serializer are needed.
            </summary>
            <param name="serializer">Json serializer used when deserializing.</param>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetBodyDeserializer.CanDeserialize(System.String,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the deserializer can deserialize the content type
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetBodyDeserializer.Deserialize(System.String,System.IO.Stream,Nancy.ModelBinding.BindingContext)">
            <summary>
            Deserialize the request body to a model
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="bodyStream">Request body stream</param>
            <param name="context">Current context</param>
            <returns>Model instance</returns>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Serialization.JsonNet.JsonNetSerializer"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetSerializer.#ctor(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Serialization.JsonNet.JsonNetSerializer"/> class,
            with the provided <paramref name="serializer"/>.
            </summary>
            <param name="serializer">Json converters used when serializing.</param>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetSerializer.CanSerialize(System.String)">
            <summary>
            Whether the serializer can serialize the content type
            </summary>
            <param name="contentType">Content type to serialise</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="P:Nancy.Serialization.JsonNet.JsonNetSerializer.Extensions">
            <summary>
            Gets the list of extensions that the serializer can handle.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of extensions if any are available, otherwise an empty enumerable.</value>
        </member>
        <member name="M:Nancy.Serialization.JsonNet.JsonNetSerializer.Serialize``1(System.String,``0,System.IO.Stream)">
            <summary>
            Serialize the given model with the given contentType
            </summary>
            <param name="contentType">Content type to serialize into</param>
            <param name="model">Model to serialize</param>
            <param name="outputStream">Output stream to serialize to</param>
            <returns>Serialised object</returns>
        </member>
    </members>
</doc>
